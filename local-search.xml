<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>快速排序Quicksort</title>
    <link href="/suan-fa-yu-shu-ju-jie-gou/kuai-su-pai-xu-quicksort.html"/>
    <url>/suan-fa-yu-shu-ju-jie-gou/kuai-su-pai-xu-quicksort.html</url>
    
    <content type="html"><![CDATA[<p>ref: Introduction to Algorithms, Third Edition</p><p>对于包含 n个数的输入数组来说，快速排序（Quicksort）是一种最坏情况时间复杂度为<span class="math inline">\(\theta(n^2)\)</span> ，期望时间复杂度为<span class="math inline">\(\theta(n\lg n)\)</span>的排序算法。另外，它还能进行<strong>原址排序</strong>，甚至在<strong>虚存空间</strong>中也能很好的工作。</p><blockquote><p>原址排序：算法在数组 A中重排这些数，在任何时候，最多只有其中的常数个数字存储在数组外面。<br>虚存空间：用户编制程序时，可以不考虑内存的实际容量，即允许程序中的逻辑地址空间 大于内存的 绝对地址空间。</p></blockquote><h2 id="快速排序的描述">1. 快速排序的描述</h2><p>与<strong>归并排序</strong>（Mergesort）一样，快速排序也使用了<strong>分治思想</strong>（Divide andConquer）。</p><h3 id="归并排序与分治思想">1. 归并排序与分治思想</h3><p><strong>分治法</strong>：将原问题（Problem）分解为几个规模较小但类似于原问题的子问题（Subproblem），<strong>递归</strong>（Recursion）地求解这些子问题，然后再合并这些子问题的解来建立原问题的解。</p><blockquote><p><strong>递归</strong>：函数的定义中使用函数自身的方法。</p></blockquote><p>分治模式在每层递归时都有三个步骤：<br><strong>分解</strong>（Divide）原问题为若干子问题，这些子问题是原问题的规模较小的实例。<br><strong>解决</strong>（Conquer）这些子问题，递归地求解各子问题。然而，若子问题的规模足够小，则直接求解。<br><strong>合并</strong>（Merge）这些子问题的解成原问题的解。</p><p>而归并排序算法完全遵循分治模式：<br><strong>分解</strong>：分解待排序的n 个元素的序列成各具 n/2个元素的两个子序列。<br><strong>解决</strong>：使用归并排序递归地排序两个子序列。<br><strong>合并</strong>：合并两个已排序的子序列以产生已排序的答案。</p><p>当待排序的序列长度为1时，递归开始回溯，在这种情况下不要做任何工作，因为长度为1的每个序列都已排好序。</p><p>下面来解释详细过程：</p><ol type="1"><li><strong>void Merge(int[] A, int p, int q, int r)</strong>合并两个已经排好序的子数组</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF = 0xFFFFFF; <span class="hljs-comment">// 无穷大（Inifity）。</span></span><br><br><span class="hljs-comment">// 给定待合并数组 A ，p、q、r分别为左边界、分界元素和右边界，且 p &lt;= q &lt; r。</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Merge</span><span class="hljs-params">(<span class="hljs-type">int</span>[] A, <span class="hljs-type">int</span> p, <span class="hljs-type">int</span> q, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>    <span class="hljs-type">int</span> n1 = q - p + <span class="hljs-number">1</span>; <span class="hljs-comment">// 左子问题的元素个数，并将分界元素分配到左侧。</span><br>    <span class="hljs-type">int</span> n2 = r - q; <span class="hljs-comment">// 右子问题的元素个数。</span><br>    <br>    <span class="hljs-type">int</span> L[n1 + <span class="hljs-number">1</span>]; <span class="hljs-comment">// 分配左侧数组，并在末尾追加大小为 ∞ 的哨兵。</span><br>    <span class="hljs-type">int</span> R[n2 + <span class="hljs-number">1</span>]; <span class="hljs-comment">// 分配右侧数组，同上，追加哨兵（Sentinel）。</span><br>  <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n1 ; ++i) &#123;<br>        L[i] = A[p + i];<br>    &#125; L[n1 + <span class="hljs-number">1</span>] = INF; <span class="hljs-comment">// 初始化左数组。</span><br>  <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n2 ; ++i) &#123;<br>        R[i] = A[q + i + <span class="hljs-number">1</span>];<br>    &#125; R[n2 + <span class="hljs-number">1</span>] = INF; <span class="hljs-comment">// 初始化右数组。</span><br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = p, j = <span class="hljs-number">0</span>, k = <span class="hljs-number">0</span>; i &lt;= q; ++i) &#123; <br>    <span class="hljs-comment">// 每次迭代，比较左数组和右数组当前元素的大小，并将较小的值填入到 A(from p to q）中。</span><br>        L[j] &lt;= R[k] ? A[i] = L[j++] : A[i] = R[k++];<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>循环不等量</strong>（LoopInvariant，程序循环过程中保持不变的性质）：子数组 A[p..i]按从小到大的顺序包含 L[0..n1] 和 R[0..n2] 中的 i - p + 1个最小元素。进而，L[j] 和 R[k] 是各自所有数组中未被复制回数组 A的最小元素。</p><p><strong>初始化</strong>：循环的第一次迭代前，有 i = p，所以子数组A[p..i-1] 为空。这个空的子数组包含 L 和 R 的 i - p + 1个最小元素。又因为 j = k = 0，所以 L[j] 和 R[k]都是各自所在数组中未被复制回到数组 A 的最小元素。</p><p><strong>保持</strong>：为了理解每次迭代都维持循环不变量，首先假设L[j] &lt;= R[k]。这时，L[j] 是未被复制回数组 A 的最小元素。因为A[p..i-1] 包含 i - p 个最小元素，所以将 L[j] 复制到 A[i] 之后，子数组A[p..i] 将包含 i - p + 1 个最小元素。增加 i 的值（在 for 循环中更新）和j 的值（在第 21 行）后，为下次迭代重新建立了该循环不变式。反之，若 L[j]&gt; R[k] ，则第 21 行执行适当操作来维持该循环不变量。</p><p><strong>终止</strong>：终止时 i = q + 1。根据循环不变量，子数组A[p..i - 1] 就是 A[p..r] 且按从小到大的顺序包含 L[0..n1] 和 R[0..n2]中的 i - p + 1 = r - p + 1 个最小元素。数组 L 和 R 一起包含 n1 + n2 + 2= r - p + 3 个元素。除两个最大的元素以外，其他所有元素都已被复制回数组A，这两个最大的元素就是哨兵。</p><p><strong>时间复杂度</strong>：<spanclass="math inline">\(\theta(n)\)</span>，<code>n</code>为数组A[p..r]被合并段的长度 <code>r - p + 1</code>。</p><p><strong>空间复杂度</strong>：<spanclass="math inline">\(\theta(n)\)</span>。</p><ol start="2" type="1"><li><strong>void MergeSort(int[] A, int p, int r)</strong> 排序子数组A[p..r] 中的元素，将 A[p..r] 分成两个子数组 A[p..q] 和A[q+1..r]，前者包含 <span class="math inline">\(\left\lceil n/2\right\rceil\)</span> 个元素，后者包含 <spanclass="math inline">\(\left\lfloor n/2 \right\rfloor\)</span>个元素。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MergeSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] A, <span class="hljs-type">int</span> p, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (p &lt; r) &#123;<br>    <span class="hljs-type">int</span> q = (p + r) / <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">MergeSort</span>(A, p, q);<br>    <span class="hljs-built_in">MergeSort</span>(A, q + <span class="hljs-number">1</span>, r);<br>    <span class="hljs-built_in">Merge</span>(A, p, q, r);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>时间复杂度</strong>： <spanclass="math inline">\(\theta(nlg{n})\)</span>，<code>n</code>为数组A[p..r]被合并段的长度<code>r - p + 1</code>，时间复杂度分析过程如下。</p><figure><img src="../img/post_img/2022_11_03,1.png" alt="2022_11_03,1" /><figcaption aria-hidden="true">2022_11_03,1</figcaption></figure><p><strong>递归方程</strong>或<strong>递归式</strong>：当一个算法包含对其自身的递归调用时，可以使用递归方程或递归式来描述其运行时间，该方程根据在较小输入上的运行时间来描述在规模为n 的总运行时间。</p><p>设 T(n) 是规模为 n 的问题的运行时间。若问题规模足够小，如对某个常量c, n &lt;= c 则直接求解需要常量时间，我们将其写作 <spanclass="math inline">\(\theta(1)\)</span> 。</p><p>假如把原问题分解成 a 个子问题，每个子问题的规模是原问题的 1/b。（对归并排序， a 和 b 都为 2 。然而，在许多分治算法中，a !=b。）为了求解一个规模为 n/b 的子问题，需要 T(n/b) 的时间，所以需要aT(n/b) 的时间来求解a个子问题。如果分解问题为子问题需要时间D(n)，合并子问题的解成原问题的解需要时间 C(n) ，那么得到 <spanclass="math display">\[T(n) = \begin{cases}           \theta(1) &amp; 若 n &lt;= c \\           aT(n/b) + D(n) + C(n) &amp; 其他       \end{cases} \tag{1}\]</span> 假定原问题规模是 2的幂，这将简化基于递归式的分析，这时每个分解步骤将产生规模刚好为 n/2的两个子序列。这将不影响递归式解的增长量级。（将在后续文章中给出证明。）</p><p><strong>分解</strong>：分解步骤仅仅计算子数组的中间位置，需要常量时间，因此，D(n)= <span class="math inline">\(\theta(1)\)</span>。</p><p><strong>解决</strong>： 我们递归地求解两个规模均为 n/2的子问题，将贡献 2T(n/2) 的运行时间。</p><p><strong>合并</strong>：我们已经注意到在一个具有 n个元素的子数组上过程 Merge 需要 <spanclass="math inline">\(\theta(n)\)</span> 的时间，所以 C(n) = <spanclass="math inline">\(\theta(n)\)</span>。</p><p>因此得到归并排序的最坏情况运行时间 T(n) 的递归式： <spanclass="math display">\[T(n) = \begin{cases}           \theta(1) &amp; 若 n = 1 \\           2T(n/2) + \theta(n) &amp; 若 n &gt; 1       \end{cases} \tag{2}\]</span> 假设 n 刚好是 2 的幂。 <span class="math display">\[T(n) = \begin{cases}           c &amp; 若 n = 1 \\           2T(n/2) + cn &amp; 若 n &gt; 1       \end{cases} \tag{3}\]</span> 将 T(n) = 2T(n/2) + cn初步展开为递归树。完全展开后，递归树具有 lgn + 1 层，没层将贡献总代价cn。所以，总代价为 <span class="math inline">\(cnlg{n} + cn\)</span>，它就是 <span class="math inline">\(\theta(nlg{n})\)</span>。</p><figure><img src="../img/post_img/2022_11_03,2.png" alt="2022_11_03,2" /><figcaption aria-hidden="true">2022_11_03,2</figcaption></figure><h3 id="快速排序quicksort">2. 快速排序（Quicksort）</h3><p>下面对子数组 A[p..r] 进行快速排序的三步分治过程：</p><p><strong>分解</strong>：数组 A[p..r] 被划分为两个（可能为空）子数组A[p..q-1] 和 A[q+1..r]，使得 A[p..q-1] 中的每一个元素都小于等于 A[q]，而A[q] 也小于等于 A[q+1..r] 中的每个元素。 其中，计算下标 q也是划分过程的一部分。</p><p><strong>解决</strong>：通过递归调用快速排序，对子数组 A[p..q-1] 和A[q+1..r] 进行排序。</p><p><strong>合并</strong>：因为子数组都是原址排序的，所以不需要合并操作：数组A[p..r] 已经有序。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Quicksort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] A, <span class="hljs-type">int</span> p, <span class="hljs-type">int</span> r)</span> </span>&#123; <span class="hljs-comment">// 快速排序</span><br>  <span class="hljs-keyword">if</span> (p &lt; r) &#123;<br>    <span class="hljs-type">int</span> q = <span class="hljs-built_in">Partition</span>(A, p, r);<br>    <span class="hljs-built_in">Quicksort</span>(A, p, q - <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">Quicksort</span>(A, q + <span class="hljs-number">1</span>, r);<br>  &#125;<br>&#125; <span class="hljs-comment">// 初始调用是 Quicksort(A, 1, A.length)</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Partition</span><span class="hljs-params">(<span class="hljs-type">int</span>[] A, <span class="hljs-type">int</span> p, <span class="hljs-type">int</span> r)</span> </span>&#123; <span class="hljs-comment">// A[p] 为数组左端点， A[r] 为数组右端点</span><br>  <span class="hljs-type">int</span> x = A[r]; <span class="hljs-comment">// 选择 x = A[r] 作为主元（pivot element）</span><br>  <span class="hljs-type">int</span> i = p - <span class="hljs-number">1</span>; <span class="hljs-comment">// A[i] 为左右分界处的左一位元素</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = p; j &lt; r; ++j) &#123; <span class="hljs-comment">// 将不大于主元的元素交换到左侧，A[j] 为迭代元素</span><br>    <span class="hljs-keyword">if</span> (A[j] &lt;= x) &#123;<br>      ++i;<br>      <span class="hljs-built_in">swap</span>(A[i], A[j]);<br>    &#125;<br>  &#125;<br>  <span class="hljs-built_in">swap</span>(A[i + <span class="hljs-number">1</span>], A[r]); <span class="hljs-comment">// 将主元交换到分界处右一位</span><br>  <span class="hljs-keyword">return</span> i + <span class="hljs-number">1</span>; <span class="hljs-comment">// 返回主元下标</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123; <span class="hljs-comment">// 交换函数</span><br>  <span class="hljs-type">int</span> tmp = a;<br>  a = b;<br>  b = tmp;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>循环不变量</strong>：</p><p>对于任意数组下标k，</p><ol type="1"><li><p>若 p &lt;= k &lt;= i，则 A[k] &lt;= x 。</p></li><li><p>若 i + 1 &lt;= k &lt;= j - 1，则 A[k] &gt; x 。</p></li><li><p>若 k = r，则 A[k] = x 。</p></li></ol><p>循环过程如下：</p><figure><img src="../img/post_img/2022_11_03,3.png" alt="2022_11_03,3" /><figcaption aria-hidden="true">2022_11_03,3</figcaption></figure><p>循环不变量如下：</p><figure><img src="../img/post_img/2022_11_03,4.png" alt="2022_11_03,4" /><figcaption aria-hidden="true">2022_11_03,4</figcaption></figure><p><strong>初始化</strong>：在循环的第一轮迭代之前是成立的，i = p - 1 和j = p。因为在 p 和 i 之间、i + 1 和 j - 1之间都不存在值，所以循环不变量的前两个条件显然都满足。第 1行中的赋值操作满足了第三个条件。</p><p><strong>保持</strong>：根据条件判断中的不同结果，我们需要考虑两种情况。当A[j] &gt; x 时，循环体的唯一操作时 j 的值加 1。在 j 值增加后，对 A[j -1]，条件 2 成立，且所有其他项都保持不变。当 A[j] &lt;= x ，将 i 值加 1，交换 A[i] 和 A[j] ，再将 j 值加 1。因为进行了交换，现在有 A[i] &lt;=x，所以条件 1 得到满足。类似地，我们也能得到 A[j - 1] &gt;x。因为根据循环不变量，被交换进 A[j - 1] 的值总是大于 x 的。</p><p><strong>终止</strong>：当终止时，j = r。于是，数组中的每个元素都必然属于循环不变量所指述的三个集合的一个，也就是说，我们己经将数组中的所有元素划分成了三个集合:包含了所有小于等于x 的元素的集合、包含了所有大于 x 的元素的集合和只有 一个元素 x的集合。</p><p>在 Partition 的最后两行中，通过将主元与最左的大于 x的元素进行交换，就可以将主元移到它在数组中的正确位置上，并返回主元的新下标。此时，Partition的输出满足划分步骤规定的条件。在执行完 Quicksort 的 Partition 之后，A[q]严格小于 A[q+1..r] 内的每一个元素。</p><p>Partition 在子数组 A[p..r] 上的时间复杂度是 <spanclass="math inline">\(\theta(n)\)</span>，其中 n = r - p + 1。</p><h3 id="快速排序的性能">3. 快速排序的性能</h3><p>快速排序的运行时间依赖于划分是否平衡，而平衡与否又依赖于用于划分的元素。如果划分是平衡的，那么快速排序算法性能与归并排序一样。如果划分是不平衡的，那么快速排序的性能就接近于插入排序了。</p><h4 id="最坏情况划分">最坏情况划分</h4><p>当划分产生的两个子问题分别包含了 n - 1 个元素和 0个元素，快速排序的最坏情况发生。假设算法的每一次递归调用中都出现了这种不平衡划分。划分操作的时间复杂度是<span class="math inline">\(\theta(n)\)</span> 。</p><p>于是算法运行时间的递归式可以表示为： <span class="math display">\[T(n) = T(n - 1) + T(0) + \theta(n) = T(n - 1) + \theta(n) = \theta(n^2)\]</span> 每一层递归的代价可以被累加起来，从而得到一个算数级数。</p><h4 id="最好情况划分">最好情况划分</h4>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>[Leetcode] No.1: Two Sum</title>
    <link href="/leetcode/leetcode-no-1-two-sum.html"/>
    <url>/leetcode/leetcode-no-1-two-sum.html</url>
    
    <content type="html"><![CDATA[<p>Give an array of integers <code>nums</code> and an integer<code>target</code> , return indices of the two numbers such that theyadd up to <code>target</code>.<br>You may assume that each input wouldhave <strong>exactly one solution</strong>, and you may not use the sameelement twice.<br>You can return the answer in any order.</p><p><strong>Example 1:</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Input: nums = [2, 7, 11, 15], target = 9<br>Output: [0, 1]<br>Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].<br></code></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Input: nums = [3, 2, 4], target = 6<br>Output: [1, 2]<br></code></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Input: nums = [3, 3], target = 6<br>Output: [0, 1]<br></code></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">· 2 &lt;= nums.length &lt;= 10^4<br>· -10^9 &lt;= nums[i] &lt;= 10^9<br>· -10^9 &lt;= target &lt;= 10^9<br>· Only one valid answer exists.<br></code></pre></td></tr></table></figure><p><strong>Follow-up:</strong> Can you come up with an algorithm that isless than <code>O(n^2)</code> time complexity?</p><h3 id="一暴力枚举">一：暴力枚举</h3><p>枚举数组中的每一个数 <code>x</code> ，并通过遍历数组查找是否存在<code>target - x</code> 。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>      <span class="hljs-type">int</span> len = nums.<span class="hljs-built_in">size</span>();<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; ++i) &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; len; ++j) &#123;<br>          <span class="hljs-keyword">if</span> (nums[i] + nums[j] == target) &#123;<br>            <span class="hljs-keyword">return</span> &#123;i, j&#125;;<br>          &#125;<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">return</span> &#123;&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>复杂度分析</strong></p><p>时间复杂度为 <span class="math inline">\(\theta (N^2)\)</span>：其中<code>N</code>是数组中的元素数量。最坏情况下数组中任意两个数都要被匹配一次。</p><p>空间复杂度为 <span class="math inline">\(\theta (1)\)</span> 。</p><blockquote><p>vector</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hot100[Leetcode]</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
